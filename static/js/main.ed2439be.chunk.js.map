{"version":3,"sources":["redux/profile-reducer.ts","assets/image/avatar.png","redux/dialogs-reducer.ts","components/Navbar/Navbar.module.css","api/api.ts","assets/FormsControls.module.css","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/Settings/Music.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/users-reducer.ts","locale/en_US.js","assets/common/Paginator.tsx","components/Users/EveryUser.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/New/new-reducer.tsx","components/New/New.tsx","redux/app-reducer.ts","hoc/WithSuspense.tsx","App.tsx","redux/redux_store.ts","index.tsx","redux/select.tsx","components/Users/user.module.css","assets/image/prelo.webp","components/preloader/preloader.jsx","utils/validators/validators.tsx","assets/FormsControls.tsx","components/Header/Header.module.css","assets/common/common.module.css"],"names":["ACTION_TYPE","initialState","profile","status","newPostText","posts","id","message","likeCount","img","isPhoto","profileReducer","state","action","type","ADD_POST","newPost","Date","getTime","newMessagePost","DELETE_POST","filter","p","postId","SET_STATUS","SET_USER_PROFILE_SUCCESS","addPostAC","deletePostAC","setStatusAC","setPhoto","setUserProfile","userId","dispatch","a","profileAPI","getUserProfile","response","data","Error","getUserStatus","getStatus","updateStatus","resultCode","dialogs","name","messages","dialogsReducer","SEND_MESSAGE","nextMessage","newMessageBody","sendMessageAC","module","exports","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","follow","post","unFollow","delete","authAPI","me","login","email","password","rememberMe","logOut","put","Navbar","className","s","nav","item","to","activeClassName","activeLink","Music","Settings","Header","props","header","src","alt","loginBlock","isAuth","onClick","error","capchaUrl","succes","GET_USER_DATA_SUCCESS","payload","getAuthUserData","res","HeaderContainer","this","React","Component","connector","connect","getIsAuth","getLogin","maxLength12","maxLengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","Input","validate","required","placeholder","commonError","length","stopSubmit","_error","useSelector","auth","users","totalUsersCount","isFetching","followingInProgress","followSucces","userID","FOLLOW_SUCCES","unFollowSuccess","UN_FOLLOW_SUCCESS","setCurrentPage","SET_CURRENT_PAGE","toggleIsFetching","TOGGLE_IS_FETCHING","toggleIsFollowingProgress","TOGGLE_IS_FOLLOWING_PROGRESS","followUnFollow","method","actionCreator","items_per_page","jump_to","jump_to_confirm","page","prev_page","next_page","prev_5","next_5","prev_3","next_3","Paginator","onPageHandler","showTitle","defaultCurrent","total","onChange","e","defaultPageSize","locale","localeInfo","EveryUser","user","common","photo","photos","small","avatar","followAndDescription","left","followed","disabled","some","style","commonBtn","right","Users","map","u","UsersContainer","pageNumber","requestUsers","compose","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","bind","items","SET_USERS","totalCount","SET_TOTAL_USER_COUNT","count","messageForState","NewReduxForm","NewForm","useDispatch","selector","new","values","messageForm","inputform","inicialized","WithSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","inicializedApp","path","render","New","Login","app","INITIALIZED_SUCCESS","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","formReducer","newMessage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","console","log","version","ReactDOM","document","getElementById","getDialogsPage","getProfile","getId","getPosts","createSelector","Preloader","prelo","width","value","maxLength","input","meta","hasError","touched","container","formControl","Textarea"],"mappings":"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","file":"static/js/main.ed2439be.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../api/api\";\r\nimport {PostsType, ProfilesType} from \"../types/types\";\r\n\r\nexport enum ACTION_TYPE {\r\n    ADD_POST = \"PROFILE/ADD-POST\",\r\n    SET_STATUS = \"PROFILE/SET_STATUS\",\r\n    DELETE_POST = \"PROFILE/DELETE-POST\",\r\n    SET_USER_PROFILE_SUCCESS = \"PROFILE/SET_USER_PROFILE_SUCCESS\",\r\n    SEND_MESSAGE = \"DIALOGS/SEND-MESSAGE\",\r\n    FOLLOW_SUCCES = \"USERS/FOLLOW_SUCCES\",\r\n    UN_FOLLOW_SUCCESS = \"USERS/UN_FOLLOW_SUCCESS\",\r\n    SET_USERS = \"USERS/SET_USERS\",\r\n    SET_CURRENT_PAGE = \"USERS/SET_CURRENT_PAGE\",\r\n    SET_TOTAL_USER_COUNT = \"USERS/SET-TOTAL_USER_COUNT\",\r\n    TOGGLE_IS_FETCHING = \"USERS/TOGGLE-IS-FETCHING\",\r\n    TOGGLE_IS_FOLLOWING_PROGRESS = \"USERS/TOGGLE-IS_FOLLOWING-PROGRESS\",\r\n    GET_USER_DATA_SUCCESS = \"AUTH/ACTION_TYPE.GET_USER_DATA_SUCCESS\",\r\n    INITIALIZED_SUCCESS = \"APP/INITIALIZED-SUCCESS\",\r\n\r\n}\r\n\r\n\r\nexport type ProfileActionType =\r\n    AddPostAT |\r\n    setUserProfileSuccessAT |\r\n    SetStatusAT |\r\n    PhotosType |\r\n    DeletePostAT\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    profile: null as ProfilesType | null,\r\n    status: '',\r\n    newPostText: '',\r\n    posts: [\r\n        {\r\n            id: 2,\r\n            message: \"Hello, how are you?\",\r\n            likeCount: 15,\r\n            img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\"\r\n        },\r\n        {\r\n            id: 1,\r\n            message: \"It's my first post\",\r\n            likeCount: 18,\r\n            img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\"\r\n        },\r\n    ] as Array<PostsType>,\r\n    isPhoto: false\r\n}\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.ADD_POST:\r\n            const newPost: PostsType = {\r\n                id: new Date().getTime(),\r\n                message: action.newMessagePost,\r\n                likeCount: 0,\r\n                img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\",\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n            }\r\n        case ACTION_TYPE.DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n\r\n        case ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case ACTION_TYPE.SET_USER_PROFILE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n        case 'SET-PHOTO': {\r\n            return {\r\n                ...state, isPhoto: action.isPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type AddPostAT = {\r\n    type: ACTION_TYPE.ADD_POST,\r\n    newMessagePost: any\r\n}\r\nexport type setUserProfileSuccessAT = {\r\n    type: ACTION_TYPE.SET_USER_PROFILE_SUCCESS,\r\n    profile: ProfilesType | null\r\n}\r\nexport type SetStatusAT = {\r\n    type: ACTION_TYPE.SET_STATUS,\r\n    status: string,\r\n}\r\n\r\nexport const addPostAC = (newMessagePost: string): AddPostAT => {\r\n    return {\r\n        type: ACTION_TYPE.ADD_POST,\r\n        newMessagePost,\r\n    } as const\r\n}\r\nexport type DeletePostAT = ReturnType<typeof deletePostAC>\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: ACTION_TYPE.DELETE_POST,\r\n        postId,\r\n    } as const\r\n}\r\n\r\nexport const setStatusAC = (status: string): SetStatusAT => {\r\n    return {\r\n        type: ACTION_TYPE.SET_STATUS,\r\n        status,\r\n    } as const\r\n}\r\nexport const setUserProfileSuccess = (profile: ProfilesType | null) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_USER_PROFILE_SUCCESS,\r\n        profile,\r\n    } as const\r\n}\r\nexport type PhotosType = ReturnType<typeof setPhoto>\r\nexport const setPhoto = (isPhoto: boolean) => {\r\n    return {\r\n        type: 'SET-PHOTO',\r\n        isPhoto,\r\n    } as const\r\n}\r\nexport const setUserProfile = (userId: string) => async (dispatch: Dispatch<ProfileActionType>) => {\r\n    try {\r\n        const response = await profileAPI.getUserProfile(userId)\r\n        dispatch(setUserProfileSuccess(response.data))\r\n        if (response.data.userId === 18320) {\r\n            dispatch(setPhoto(true))\r\n        } else {\r\n            dispatch(setPhoto(false))\r\n        }\r\n    } catch (e) {\r\n        throw  Error\r\n    }\r\n}\r\nexport const getUserStatus = (userId: string) => async (dispatch: Dispatch<ProfileActionType>) => {\r\n    try {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatusAC(response.data))\r\n    } catch (e) {\r\n        throw  Error\r\n    }\r\n}\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        try {\r\n            const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatusAC(status))\r\n            }\r\n        } catch (error) {\r\n            throw  Error\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/avatar.7bdf7b93.png\";","import { DialogsType, MessagesType } from \"../types/types\";\r\nimport {ACTION_TYPE} from \"./profile-reducer\";\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type DialogActionType = SendMessageAT\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Marina\",\r\n            img: \"https://video-pricheski.ru/photo/img/foto-devushek-s-korotkoi-strizhkoi-dlia-avy-3.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Alina\",\r\n            img: \"https://bipbap.ru/wp-content/uploads/2017/05/370.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Alex\",\r\n            img: \"https://prikolnye-kartinki.ru/img/picture/Aug/23/f0b9e5a7d4b40ce999e2ba9b4e4d1b39/2.jpg\"\r\n        },\r\n        {id: 4, name: \"Viktor\", img: \"https://87.img.avito.st/640x480/8817015087.jpg\"},\r\n        {\r\n            id: 6,\r\n            name: \"Anna\",\r\n            img: \"https://i.pinimg.com/originals/b2/95/45/b29545916fbf406f7cec10ff1845a191.jpg\"\r\n        },\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: \"How are you?\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"Yo\"},\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SEND_MESSAGE:\r\n            const nextMessage: MessagesType = {\r\n                id: new Date().getTime(),\r\n                message: action.newMessageBody\r\n            }\r\n\r\n            return {\r\n                ...state, messages: [nextMessage, ...state.messages],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype SendMessageAT = {\r\n    type: ACTION_TYPE.SEND_MESSAGE,\r\n    newMessageBody: string\r\n}\r\nexport const sendMessageAC = (newMessageBody: string): SendMessageAT => {\r\n    return (\r\n        {\r\n            type: ACTION_TYPE.SEND_MESSAGE,\r\n            newMessageBody,\r\n        }\r\n    ) as const\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2Igho\",\"item\":\"Navbar_item__2G-Y8\",\"activeLink\":\"Navbar_activeLink__2_b4M\",\"post\":\"Navbar_post__vX5CE\",\"active\":\"Navbar_active__2xQZY\"};","import axios from \"axios\";\r\nimport {ProfilesType, UserType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"f499194a-9fc7-4a05-a45f-a1732e1abd57\"\r\n    }\r\n});\r\n\r\nexport type ResponseUserType<T={}> = {\r\n    items: T\r\n    totalCount: number\r\n    error: number\r\n}\r\n\r\nexport type CommonType<T={}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: T\r\n}\r\nexport type AuthMeType= {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 10, pageSize: number = 100) => {\r\n        return instance.get<ResponseUserType<UserType[]>>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: string | number) {\r\n        return instance.post<CommonType>(`follow/` + userId, {}, {})\r\n\r\n    }, unFollow(userId: string | number) {\r\n        return instance.delete<CommonType>(`follow/` + userId, {})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<CommonType<AuthMeType>>(`auth/me`, {})\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<CommonType<{userId: number}>>(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logOut() {\r\n        return instance.delete<CommonType>(`auth/login`,{})\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: string) {\r\n        return instance.get<ProfilesType>(`profile/` + userId,\r\n        )\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<any>(`profile/status/` + userId,)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonType>(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FormsControls_container__tEoKy\",\"formControl\":\"FormsControls_formControl__1ZqMu\",\"error\":\"FormsControls_error__2rsMM\",\"comonError\":\"FormsControls_comonError__1Rnk-\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/new\" activeClassName={s.activeLink}>New</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n        </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/friends\" activeClassName={s.activeLink}>Friends</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n)\r\n}\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\n\r\nexport const Music= () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music;","import React from 'react';\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Header.module.css\"\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logOut: () => void\r\n\r\n}\r\n const Header  = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n        <img src ='https://i1.7fon.org/thumb/z134398.jpg' alt ='label'/>\r\n            <div className={s.loginBlock}>\r\n                { props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logOut}>Log out</button></div>\r\n                    : <NavLink to={\"./login\"}>Login</NavLink> }\r\n            </div>\r\n    </header>\r\n    )}\r\nexport default Header;\r\n","import {ACTION_TYPE} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {AppThunk} from \"./redux_store\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {GetAuthUserType} from \"../types/types\";\r\n\r\n\r\nexport const initialState = {\r\n    id: '',\r\n    email: null as string|null,\r\n    login: null as string|null,\r\n    isAuth: false,\r\n    error: null,\r\n    capchaUrl: null as string|null,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type AuthActionType = SuccesType| FormAction\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.GET_USER_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SuccesType = {\r\n    type: ACTION_TYPE.GET_USER_DATA_SUCCESS,\r\n    payload: GetAuthUserType\r\n}\r\nexport const succes = (id: string , email: string | null, login: string | null, isAuth: boolean): SuccesType => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.GET_USER_DATA_SUCCESS,\r\n        payload: {id, email, login, isAuth,}\r\n    }\r\n}\r\nexport const getAuthUserData = () => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            const res = await authAPI.me()\r\n            if (res.data.resultCode === 0) {\r\n                let {id, email, login} = res.data.data\r\n                dispatch(succes(id, email, login, true))\r\n            }\r\n        }catch (e){\r\n            throw  Error\r\n        }\r\n\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean):AppThunk => {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await authAPI.login(email, password, rememberMe,)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error'\r\n                dispatch(stopSubmit(\"login\", {_error: message}))\r\n            }\r\n\r\n        } catch (e) {\r\n            throw  Error\r\n        }\r\n    }\r\n}\r\nexport const logOut = () => async (dispatch: Dispatch<AuthActionType>) => {\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(succes('', null, null, false))\r\n        }\r\n    }catch (e) {\r\n       throw  Error\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {logOut} from \"../../redux/auth-reducer\";\r\nimport {getIsAuth, getLogin} from '../../redux/select'\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\nclass HeaderContainer extends React.Component<connectorType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                {...this.props}\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}/>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        login: getLogin(state),\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps,  {logOut})\r\ntype connectorType = ConnectedProps<typeof connector>\r\nexport default connector(HeaderContainer)","import React from 'react';\r\nimport {connect, ConnectedProps, useSelector} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from \"../../assets/FormsControls\";\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux_store';\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport s from '../../assets/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    password: string\r\n    rememberMe: boolean\r\n    email: string\r\n}\r\nconst Login = (props: LoginPropsType) => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const onSubmit = (data: FormDataType,) => {\r\n        props.login(data.password, data.email, data.rememberMe);\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>;\r\n    }\r\n    return (\r\n        <div>\r\n            <h1><i>{'Login'}</i></h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\nconst maxLength12 = maxLengthCreator(30)\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = props => {\r\n    const {handleSubmit,error } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <i>Login</i>\r\n            <Field\r\n                component={Input}\r\n                name={'password'}\r\n                type='text'\r\n                validate={[required, maxLength12,]}/>\r\n            <i>Password</i>\r\n            <Field\r\n                component={Input}\r\n                name={'email'}\r\n                type=\"password\"\r\n                placeholder={'Password'}\r\n                validate={[required, maxLength12,]}/>\r\n            <i>remember me</i>\r\n            <Field\r\n                component={'input'}\r\n                name={'remember me'}\r\n                type={'checkbox'}\r\n            />\r\n            {error && <div className={s.commonError}>\r\n                {error}\r\n            </div>\r\n            }\r\n\r\n            <button>Login</button>\r\n\r\n        </form>\r\n\r\n    );\r\n}\r\nconst LoginReduxForm = reduxForm\r\n<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n    const connector = connect(null, {login})\r\n    type LoginPropsType = ConnectedProps <typeof connector>;\r\n        export default connector(Login);\r\n\r\n","import {ACTION_TYPE} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport type UsersActionType = FollowAT |\r\n    UnFollowAT |\r\n    SetUsersAT |\r\n    SetCurrentPageAT |\r\n    SetTotalUserCountAT |\r\n    ToggleIsFetchingAT |\r\n    ToggleIsFollowingProgressAT\r\n\r\ntype InitialStateType = typeof initialState\r\nexport const initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 10,   // количество userov на одной странице\r\n    totalUsersCount: 20,  // сколько всего пользователей\r\n    currentPage: 1,   // текущая страница которую просматриваем\r\n    isFetching: false,\r\n    followingInProgress: [] as number[] //id пользователей\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FOLLOW_SUCCES:\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: true} : u)}\r\n\r\n        case ACTION_TYPE.UN_FOLLOW_SUCCESS:\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: false} : u)}\r\n\r\n        case ACTION_TYPE.SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case ACTION_TYPE.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case ACTION_TYPE.SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case ACTION_TYPE.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype FollowAT = {\r\n    type: ACTION_TYPE.FOLLOW_SUCCES\r\n    userID: number\r\n}\r\ntype UnFollowAT = {\r\n    type: ACTION_TYPE.UN_FOLLOW_SUCCESS\r\n    userID: number\r\n}\r\ntype SetUsersAT = {\r\n    type: ACTION_TYPE.SET_USERS\r\n    users: UserType[]\r\n}\r\ntype SetCurrentPageAT = {\r\n    type: ACTION_TYPE.SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\n\r\ntype SetTotalUserCountAT = {\r\n    type: ACTION_TYPE.SET_TOTAL_USER_COUNT\r\n    count: number\r\n}\r\n\r\ntype ToggleIsFetchingAT = {\r\n    type: ACTION_TYPE.TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype ToggleIsFollowingProgressAT = {\r\n    type: ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS\r\n    userId: number\r\n    isFetching: boolean\r\n}\r\nexport const followSucces = (userID: number): FollowAT => {    // функции AC\r\n    return {\r\n        type: ACTION_TYPE.FOLLOW_SUCCES,\r\n        userID: userID,\r\n    } as const\r\n}\r\nexport const unFollowSuccess = (userID: number): UnFollowAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.UN_FOLLOW_SUCCESS,\r\n        userID: userID\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_USERS,\r\n        users: users,\r\n    } as const\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_CURRENT_PAGE,\r\n        currentPage,\r\n    } as const\r\n}\r\nexport const setTotalUserCount = (totalUsersCount: number): SetTotalUserCountAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FETCHING,\r\n        isFetching,\r\n    }\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): ToggleIsFollowingProgressAT => {\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId,\r\n    } as const\r\n}\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch<UsersActionType>) => {\r\n    dispatch(setCurrentPage(page))\r\n    dispatch(toggleIsFetching(true))\r\n    try {\r\n        const data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUserCount(data.totalCount))\r\n    } catch (e) {\r\n        throw  Error\r\n    }\r\n}\r\n\r\nconst followUnFollow = async (dispatch: Dispatch<UsersActionType>, userId: number, method: any, actionCreator: Function) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const response = await method(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userId: number) => async (dispatch: Dispatch<UsersActionType>) => {\r\n    followUnFollow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSucces)\r\n}\r\n\r\nexport const unFollow = (userId: number) => async (dispatch: Dispatch<UsersActionType>) => {\r\n    followUnFollow(dispatch, userId, usersAPI.unFollow.bind(usersAPI), unFollowSuccess)\r\n}\r\n\r\n\r\n\r\n","\r\nexport  default {\r\n    // Options.jsx\r\n    items_per_page: '/ page',\r\n    jump_to: 'Go to',\r\n    jump_to_confirm: 'confirm',\r\n    page: '',\r\n\r\n    // Pagination.jsx\r\n    prev_page: 'Previous Page',\r\n    next_page: 'Next Page',\r\n    prev_5: 'Previous 5 Pages',\r\n    next_5: 'Next 5 Pages',\r\n    prev_3: 'Previous 3 Pages',\r\n    next_3: 'Next 3 Pages',\r\n}\r\n","import React from \"react\";\r\nimport Pagination from \"rc-pagination\";\r\nimport localeInfo from '../../locale/en_US';\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    onPageHandler:(pageNumber: number) => void\r\n    pageSize: number\r\n\r\n}\r\nexport const Paginator: React.FC <PropsType> = props=> {\r\n    const {currentPage,totalUsersCount,onPageHandler, pageSize }=props\r\n        return(\r\n    <div className={\"pagination\"}>\r\n        <Pagination className=\"ant-pagination\"\r\n                    showTitle={true}\r\n                    defaultCurrent={currentPage}\r\n                    total={totalUsersCount}\r\n                    onChange={(e) => onPageHandler(e)}\r\n                    defaultPageSize={pageSize}\r\n                    pageSize={pageSize}\r\n                    locale={localeInfo}/>\r\n    </div>)\r\n}","import React from 'react';\r\nimport s from \"./user.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../assets/image/avatar.png\";\r\nimport {UserType} from \"../../types/types\";\r\nimport style from '../../assets/common/common.module.css'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n    follow: (userID: number) => void\r\n    unFollow: (userID: number) => void\r\n}\r\nexport const EveryUser = (props: PropsType) => {\r\n    const {user, followingInProgress, follow, unFollow,} = props\r\n\r\n    return (\r\n        <div key={user.id}\r\n             className={s.user}>\r\n            <div className={s.common}>\r\n                <NavLink className={s.photo} to={'./profile/' + user.id}>\r\n                    <img src={user.photos.small ? user.photos.small : avatar}\r\n                    alt={'photos'}/>\r\n                </NavLink>\r\n\r\n                <div className={s.followAndDescription}>\r\n                    <div className={s.left}>\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                    onClick={() => {\r\n                                        unFollow(user.id);\r\n                                    }} className={style.commonBtn}>UnFollow\r\n                            </button>\r\n                            :\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                    onClick={() => {\r\n                                        follow(user.id)\r\n                                    }} className={style.commonBtn}>Follow\r\n                            </button>\r\n                        }\r\n\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </div>\r\n                    <div className={s.right}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from \"react\";\nimport s from \"./user.module.css\"\nimport {UsersType} from \"../../types/types\";\nimport {Paginator} from \"../../assets/common/Paginator\";\nimport {EveryUser} from \"./EveryUser\";\n\nexport let Users: React.FC<UsersType> = props => {\n    return (\n        <>\n            <Paginator\n                onPageHandler={props.onPageHandler}\n                pageSize={props.pageSize}\n                totalUsersCount={props.totalUsersCount}\n                currentPage={props.currentPage}\n            />\n            <div className={s.users}>\n                {\n                    props.users.map(u => <EveryUser\n                        key={u.id}\n                        user={u}\n                        follow={props.follow}\n                        unFollow={props.unFollow}\n                        followingInProgress={props.followingInProgress}/>)\n                }\n            </div>\n        </>\n\n    )\n}\n\n\n\n\n\n\n\n\n\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {follow, requestUsers, setCurrentPage, toggleIsFollowingProgress, unFollow,} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport Preloader from \"../preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {Users} from \"./Users\";\r\nimport {UserType} from '../../types/types';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/select';\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage,pageSize } = this.props\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageHandler = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        const {isFetching}=this.props;\r\n        return (\r\n            <>    {isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    unFollow={this.props.unFollow}\r\n                    follow={this.props.follow}\r\n                    users={this.props.users}\r\n                    onPageHandler={this.onPageHandler}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport type UsersPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nexport type MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void,\r\n    unFollow: (userID: number) => void,\r\n    setCurrentPage: (currentPage: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,      // подразумевает follow: follow, где второе follow - это санки\r\n        unFollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        requestUsers: requestUsers\r\n    }),\r\n)(UsersContainer)\r\n\r\n\r\n\r\n","\r\nexport type initialStateType = {\r\n    messageForState: messageForStateType[]\r\n}\r\nexport type messageForStateType = {\r\n    id: number\r\n    message: string\r\n}\r\nconst initialState = {\r\n    messageForState:[\r\n        {id: 1, message: \"hello\"},\r\n        {id: 2, message: \"hi\"},\r\n    ]\r\n}\r\ntype actionType = {\r\n    type: \"ADD_MESSAGE\"\r\n    messageForm: string\r\n}\r\nexport const NewReducer = (state = initialState, action: actionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_MESSAGE\":\r\n            const newMessage = {\r\n                id: new Date().getTime(),\r\n                message: action.messageForm,\r\n            }\r\n            return {\r\n                ...state, messageForState: [newMessage, ...state.messageForState]\r\n            }\r\n\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\nexport const addNewMessageForm = (messageForm: string): actionType => {\r\n    return (\r\n        {\r\n            type: \"ADD_MESSAGE\",\r\n            messageForm\r\n        }\r\n    ) as const\r\n}\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {AppStateType} from '../../redux/redux_store';\r\nimport {addNewMessageForm} from './new-reducer';\r\n\r\n\r\nconst NewForm = () => {\r\n    const dispatch = useDispatch()\r\n    const selector = useSelector((state: AppStateType) => state.new.messageForState)\r\n\r\n\r\n    let addMessageForm = (values: any) => {\r\n        dispatch(addNewMessageForm(values.inputform))\r\n    }\r\n    return (\r\n        <div>\r\n            {selector.map(s => {\r\n                return <div key={s.id}>{s.message}</div>\r\n            })}\r\n            <NewReduxForm onSubmit={addMessageForm}/>\r\n        </div>)\r\n}\r\nconst NewComponentForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component=\"input\"\r\n                name=\"inputform\"\r\n            />\r\n            <button>Add New</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewReduxForm = reduxForm({form: 'newForm'})(NewComponentForm)\r\nexport default NewForm;","import {getAuthUserData} from \"./auth-reducer\"\r\nimport {ACTION_TYPE} from \"./profile-reducer\"\r\nimport {AppThunk} from \"./redux_store\"\r\n\r\ntype InitialStateType = typeof initialState\r\nconst initialState = {\r\n    inicialized: false\r\n}\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.INITIALIZED_SUCCESS:\r\n            return {...state, inicialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype InicializedAT = ReturnType<typeof inicializedAC>\r\nexport type AppActionsReducerType = InicializedAT\r\n\r\nexport const inicializedAC = () => {\r\n    return {\r\n        type: ACTION_TYPE.INITIALIZED_SUCCESS,\r\n    }\r\n}\r\n\r\nexport const inicializedApp = (): AppThunk => dispatch => {\r\n    let promise = dispatch(getAuthUserData())\r\n    promise.then(() => {\r\n        dispatch(inicializedAC())\r\n    })\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport Preloader from \"../components/preloader/preloader\";\r\n\r\nexport function WithSuspense<T>(Component: ComponentType<T>) {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props as T}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Music\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport NewForm from './components/New/New';\nimport {AppStateType} from './redux/redux_store';\nimport Preloader from './components/preloader/preloader';\nimport {inicializedApp} from './redux/app-reducer'\nimport {Route} from 'react-router';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {WithSuspense} from \"./hoc/WithSuspense\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\n\nclass App extends React.Component<ConectedType> {\n    componentDidMount() {\n        this.props.inicializedApp()\n    }\n\n    render() {\n        if (!this.props.inicialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/profile/:userId?\" render={WithSuspense(ProfileContainer)}/>\n                    <Route path=\"/dialogs\"\n                           render={WithSuspense(DialogsContainer)}/>\n                    <Route path=\"/users\" render={() =>\n                        <UsersContainer/>}/>\n\n                    <Route path=\"/new\" render={() => <NewForm/>}/>\n                    <Route path=\"/music\" component={Music}/>\n                    <Route path=\"/settings\" component={Settings}/>\n                    <Route path=\"/friends\" render={() => <div>f</div>}/>\n                    <Route path=\"/login\" component={Login}/>\n                </div>\n            </div>)\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        inicialized: state.app.inicialized,\n    }\n}\nlet connector = connect(mapStateToProps, {inicializedApp})\ntype ConectedType = ConnectedProps<typeof connector>\nexport default connector(App)\n\n\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {ProfileActionType, profileReducer} from \"./profile-reducer\";\r\nimport {DialogActionType, dialogsReducer} from \"./dialogs-reducer\";\r\nimport {UsersActionType, usersReducer} from \"./users-reducer\";\r\nimport {AuthActionType, authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleWare, {ThunkAction} from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {NewReducer} from \"../components/New/new-reducer\";\r\nimport {AppActionsReducerType, appReducer} from \"./app-reducer\";\r\n\r\n/*export type ActionsType =\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof changeTextareaAC> |\r\n    ReturnType<typeof upDateNewMessageTextAC> |\r\n    ReturnType<typeof sendMessageAC>*/\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({              //rootReducer возвращает state\r\n    profilePage: profileReducer,  //это наш целый стэйт\r\n    dialogsPage: dialogsReducer,  // ключ: значение\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    new: NewReducer,\r\n    app: appReducer,\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>   //  ReturnType -> дай мне  возвращаемый тип rootReducera\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\nexport type AppActionsType =\r\n    AppActionsReducerType | AuthActionType |\r\n    DialogActionType | ProfileActionType |\r\n    UsersActionType\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose   //подключили redux vtool\r\nexport let store = createStore(rootReducer,composeEnhancers( applyMiddleware(thunkMiddleWare)))\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from './redux/redux_store';\n\nconsole.log(React.version);\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {AppStateType} from \"./redux_store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getDialogsPage = (state: AppStateType) => {\r\n    return state.dialogsPage\r\n}\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\nexport const getProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getStatus = (state: AppStateType) => {\r\n    return state.profilePage.status\r\n}\r\nexport const getId = (state: AppStateType) => {\r\n    return state.auth.id\r\n}\r\nexport const getPosts = (state: AppStateType) => {\r\n    return state.profilePage.posts\r\n}\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\nexport const getUsersSuper = createSelector(\r\n    getUsers, (users) => {                                        // из библиотеки reselect!\r\n        return users.filter(u => true)\r\n    })","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"user_users__3bOof\",\"common\":\"user_common__27ZKp\",\"photo\":\"user_photo__1YF2n\",\"left\":\"user_left__10Sku\",\"right\":\"user_right__7Zefu\",\"followAndDescription\":\"user_followAndDescription__kW9K0\",\"selected\":\"user_selected__2QMlw\"};","export default __webpack_public_path__ + \"static/media/prelo.d7190a4c.webp\";","import React from 'react';\r\nimport prelo from '../../assets/image/prelo.webp'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={prelo} style={{width: \"300px\"}} alt={'preloader'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","\r\nexport const required = (value: string) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n    return (value: string) => {\r\n        if (value.length > maxLength ) return `max length with ${maxLength} symbols`\r\n        return undefined\r\n\r\n    }}\r\n\r\n","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n                <input {...input}/>\r\n                {hasError && <span className={`${s.formControl} ${s.error}`}>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta} = props\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n                <textarea {...input}{...props}/>\r\n                {hasError && <span className={`${s.formControl} ${s.error}`}>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1CaU9\",\"loginBlock\":\"Header_loginBlock__1lSDB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonBtn\":\"common_commonBtn__3Hv8X\"};"],"sourceRoot":""}