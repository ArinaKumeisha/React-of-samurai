{"version":3,"sources":["components/Users/user.module.css","components/Dialogs/Dialogs.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Profile/myPosts/MyPosts.module.css","components/Profile/myPosts/Post/post.module.css","components/Navbar/Navbar.module.css","redux/profile-reducer.tsx","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/Settings/Music.tsx","components/New/New.tsx","components/Header/Header.tsx","api/api.ts","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/dialogs-reducer.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.js","components/Dialogs/DialogsContainer.tsx","redux/users-reducer.tsx","assets/image/preloader.gif","components/preloader/preloader.jsx","assets/image/avatar.png","locale/en_US.js","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/MyPosts.tsx","components/Profile/myPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","App.tsx","redux/redux_store.tsx","index.tsx"],"names":["module","exports","ACTION_TYPE","Navbar","className","s","nav","item","to","activeClassName","activeLink","Music","Settings","News","Header","props","header","src","loginBlock","isAuth","login","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","authAPI","profileAPI","status","put","initialState","newPostText","profile","posts","id","message","likeCount","img","setStatusAC","type","SET_STATUS","email","HeaderContainer","this","setAuthUserData","React","Component","connect","state","auth","dispatch","payLoad","resultCode","SET_USER_DATA_SUCCESS","Login","dialogs","name","messages","newMessageText","Dialogs","dialogsItems","dialogsPage","map","d","dialog","active","m","value","placeholder","onChange","e","changeNewMessage","currentTarget","onClick","sendNewMessage","mapStateToPropsForDirect","withAuthRedirect","RedirectComponent","compose","newMessage","UPDATE_NEW_MESSAGE_TEXT","upDateNewMessageTextAC","SEND_MESSAGE","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","TOGGLE_IS_FETCHING","toggleIsFollowingProgress","TOGGLE_IS_FOLLOWING_PROGRESS","Preloader","preloader","style","width","items_per_page","jump_to","jump_to_confirm","page","prev_page","next_page","prev_5","next_5","prev_3","next_3","Users","showTitle","defaultCurrent","total","onPageHandler","defaultPageSize","locale","localeInfo","u","user","common","photo","photos","small","avatar","followAndDescription","left","followed","disabled","some","unFollow","follow","right","UsersContainer","pageNumber","getUsers","usersPage","userID","FOLLOW_SUCCES","UN_FOLLOW_SUCCESS","setCurrentPage","SET_CURRENT_PAGE","items","SET_USERS","totalCount","SET_TOTAL_USER_COUNT","count","ProfileStatus","editMode","activateMode","setState","deActivateMode","updateStatus","onStatusChange","prevProps","prevState","console","log","autoFocus","onBlur","onDoubleClick","ProfileInfo","info","descriptionBlock","large","description","aboutMe","href","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","fullName","lookingForAJob","lookingForAJobDescription","Post","MyPosts","postBlock","p","changeText","addPost","MyPostsContainer","profilePage","ADD_POST","newText","CHANGE_TEXT","changeTextAC","Profile","ProfileContainer","match","params","setUserProfile","getUserStatus","SET_USER_PROFILE_SUCCESS","withRouter","App","path","render","DialogsContainer","New","component","rootReducer","combineReducers","action","newPost","Date","getTime","nextMessage","filter","store","createStore","applyMiddleware","thunkMiddleWare","window","getState","bind","version","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.543224c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"user_users__20GWR\",\"common\":\"user_common__nPNWW\",\"photo\":\"user_photo__27-sB\",\"left\":\"user_left__jB-t4\",\"right\":\"user_right__1VjZT\",\"followAndDescription\":\"user_followAndDescription__BuxlD\",\"selected\":\"user_selected__2EYAQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3JNHv\",\"dialog\":\"Dialogs_dialog__C7cto\",\"dialogsItems\":\"Dialogs_dialogsItems__23VzR\",\"active\":\"Dialogs_active__1z9uI\",\"messages\":\"Dialogs_messages__2xtaS\",\"message\":\"Dialogs_message__3M2_2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"ProfileInfo_photo__1l8qC\",\"item\":\"ProfileInfo_item__1TCau\",\"info\":\"ProfileInfo_info__2LiY1\",\"description\":\"ProfileInfo_description__3B6H6\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__54mFN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3GC7Y\",\"loginBlock\":\"Header_loginBlock__19WUY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__H8MUs\",\"posts\":\"MyPosts_posts__Iazf1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__3_PJJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__e4uhQ\",\"item\":\"Navbar_item__28Nf6\",\"activeLink\":\"Navbar_activeLink__dM65d\",\"post\":\"Navbar_post__1UOVN\",\"active\":\"Navbar_active__RuT47\"};","/*import React from 'react';*/\r\n// reducer принимает часть стэйта и action, у которого как минимум есть type\r\n//  и возвращает преобразованный state\r\n\r\n\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI, profileAPI} from \"../api/api\";\r\n\r\n\r\nexport enum ACTION_TYPE {\r\n    ADD_POST = \"ADD-POST\",\r\n    CHANGE_TEXT = \"CHANGE-TEXT\",\r\n    SEND_MESSAGE = \"SEND-MESSAGE\",\r\n    UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\",\r\n    FOLLOW_SUCCES = \"FOLLOW_SUCCES\",\r\n    UN_FOLLOW_SUCCESS = \"UN_FOLLOW_SUCCESS\",\r\n    SET_USERS = \"SET_USERS\",\r\n    SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\",\r\n    SET_TOTAL_USER_COUNT = \"SET-TOTAL_USER_COUNT\",\r\n    TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\",\r\n    SET_USER_PROFILE_SUCCESS = \"SET_USER_PROFILE_SUCCESS\",\r\n    SET_USER_DATA_SUCCESS = \"SET_USER_DATA_SUCCESS\",\r\n    TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE-IS_FOLLOWING-PROGRESS\",\r\n    SET_STATUS = \"SET_STATUS\",\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n    img: string\r\n}\r\nexport type AddPostAT = {\r\n    type: ACTION_TYPE.ADD_POST\r\n}\r\nexport type ChangeTextAT = {\r\n    type: ACTION_TYPE.CHANGE_TEXT,\r\n    newText: string\r\n}\r\nexport type setUserProfileSuccessAT = {\r\n    type: ACTION_TYPE.SET_USER_PROFILE_SUCCESS,\r\n    profile: any\r\n}\r\nexport type SetStatusAT = {\r\n    type: ACTION_TYPE.SET_STATUS,\r\n    status: string,\r\n}\r\n\r\nexport type ProfileActionType =\r\n    AddPostAT |\r\n    ChangeTextAT |\r\n    setUserProfileSuccessAT |\r\n    SetStatusAT\r\n\r\n\r\n// можно типизировать так\r\n// export type ActionsType =\r\n//     ReturnType<typeof changeTextareaAC> |\r\n//     ReturnType<typeof upDateNewMessageTextAC> |\r\n//     ReturnType<typeof sendMessageAC> |\r\n//     ReturnType<typeof followAC> |\r\n//     ReturnType<typeof unFollowAC> |\r\n//     ReturnType<typeof setUsersAC> |\r\n//     ReturnType<typeof setCurrentPageAC> |\r\n//     ReturnType<typeof setTotalUserCountAC>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    newPostText: \"\",\r\n    profile: null,\r\n    status: \"\",\r\n    posts: [\r\n        {\r\n            id: 2,\r\n            message: \"Hello, how are you?\",\r\n            likeCount: 15,\r\n            img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\"\r\n        },\r\n        {\r\n            id: 1,\r\n            message: \"It's my first post\",\r\n            likeCount: 18,\r\n            img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\"\r\n        },\r\n    ] as Array<PostsType>,\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.ADD_POST:\r\n            const newPost: PostsType = {\r\n                id: new Date().getTime(),\r\n                message: state.newPostText,\r\n                likeCount: 0,\r\n                img: \"https://www.fotoprizer.ru/img_inf/st_221.jpg\",\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n                newPostText: \"\"\r\n            }\r\n        case ACTION_TYPE.CHANGE_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        case ACTION_TYPE.SET_USER_PROFILE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case ACTION_TYPE.SET_STATUS:\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addPostAC = (): AddPostAT => {\r\n    return {\r\n        type: ACTION_TYPE.ADD_POST,\r\n    } as const\r\n}\r\n\r\nexport const changeTextAC = (newText: string): ChangeTextAT => {\r\n    return {\r\n        type: ACTION_TYPE.CHANGE_TEXT,\r\n        newText,\r\n    } as const\r\n}\r\n\r\nexport const setStatusAC = (status: string): SetStatusAT => {\r\n    return {\r\n        type: ACTION_TYPE.SET_STATUS,\r\n        status,\r\n    } as const\r\n}\r\nexport const setUserProfileSuccess = (profile: any) => {\r\n    return {\r\n        type: ACTION_TYPE.SET_USER_PROFILE_SUCCESS,\r\n        profile\r\n    } as const\r\n}\r\nexport const setUserProfile = (userId: string) => {\r\n    return (dispatch: Dispatch<ProfileActionType>) => {\r\n        profileAPI.getUserProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfileSuccess(response.data))\r\n            })\r\n    }\r\n}\r\nexport const getUserStatus = (userId: string) => {\r\n    return (dispatch: Dispatch<ProfileActionType>) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                    dispatch(setStatusAC(response.data))\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: Dispatch<ProfileActionType>) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatusAC(status))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/new\" activeClassName={s.activeLink}>New</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n        </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/friends\" activeClassName={s.activeLink}>Friends</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n        </nav>\r\n)\r\n}\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\nimport s from \"../New/New.module.css\"\r\n\r\nexport const Music= () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music;","import React from 'react';\r\n\r\nexport const Settings= () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings;","import React from 'react';\r\nimport s from \"../New/New.module.css\"\r\n\r\nexport const News= () => {\r\n    return (\r\n        <div>\r\n            New\r\n        </div>\r\n    )\r\n}\r\nexport default News;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Header.module.css\"\r\n\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\n const Header  = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n        <img src ='https://i1.7fon.org/thumb/z134398.jpg' />\r\n            <div className={s.loginBlock}>\r\n                { props.isAuth ? props.login : <NavLink to={\"./login\"}>Login</NavLink> }\r\n            </div>\r\n    </header>\r\n    )}\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"f499194a-9fc7-4a05-a45f-a1732e1abd57\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 10, pageSize: number = 100) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: string | number) {\r\n        return instance.post(`follow/` + userId, {}, {})\r\n\r\n    }, unFollow(userId: string | number) {\r\n        return instance.delete(`follow/` + userId, {}\r\n        )\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`, {})\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n   getUserProfile(userId: string) {\r\n        return instance.get(`profile/` + userId,\r\n        )\r\n    },\r\n    getStatus (userId: string) {\r\n       return instance.get(`profile/status/` + userId,)\r\n    },\r\n    updateStatus (status: string) {\r\n       return instance.put(`profile/status`,{status: status})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ACTION_TYPE} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\n\r\nexport const initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n}\r\nexport type InitialStateSetUserType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype AuthActionType =\r\n    ReturnType<typeof setAuthUserDataSucces>\r\n\r\nexport const authReducer = (state: InitialStateSetUserType = initialState, action: AuthActionType): InitialStateSetUserType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_USER_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payLoad,\r\n                isAuth: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserDataSucces = (payLoad: InitialStateSetUserType) => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_USER_DATA_SUCCESS,\r\n        payLoad\r\n    } as const\r\n}\r\n\r\nexport const setAuthUserData = () => {\r\n    return (dispatch: Dispatch<AuthActionType>) => {\r\n        authAPI.me()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setAuthUserDataSucces(response.data.data))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n      this.props.setAuthUserData()\r\n    }\r\n    render() {\r\n        return (\r\n            <Header\r\n                {...this.props}\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}/>\r\n\r\n        )\r\n    }\r\n}\r\n\r\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType\r\ntype MapDispatchToPropsType = {\r\n    setAuthUserData: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData})(HeaderContainer)\r\n","import React from 'react';\r\n\r\nconst Login = () => {\r\n    return (\r\n        <h3>Login</h3>\r\n    );\r\n};\r\n\r\nexport default Login;","import {ACTION_TYPE} from \"./profile-reducer\";\r\n\r\n\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nexport type InitialStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n}\r\ntype SendMessageAT = {\r\n    type: ACTION_TYPE.SEND_MESSAGE\r\n}\r\ntype UpdateMessageTextAT = {\r\n    type: ACTION_TYPE.UPDATE_NEW_MESSAGE_TEXT\r\n    newMessage: string\r\n\r\n}\r\ntype DialogActionType = SendMessageAT | UpdateMessageTextAT\r\n/*export type InitialStateType = typeof initialState*/\r\n\r\nlet initialState: InitialStateType = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Marina\",\r\n            img: \"https://video-pricheski.ru/photo/img/foto-devushek-s-korotkoi-strizhkoi-dlia-avy-3.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Alina\",\r\n            img: \"https://bipbap.ru/wp-content/uploads/2017/05/370.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Alex\",\r\n            img: \"https://prikolnye-kartinki.ru/img/picture/Aug/23/f0b9e5a7d4b40ce999e2ba9b4e4d1b39/2.jpg\"\r\n        },\r\n        {id: 4, name: \"Viktor\", img: \"https://87.img.avito.st/640x480/8817015087.jpg\"},\r\n        {\r\n            id: 6,\r\n            name: \"Anna\",\r\n            img: \"https://i.pinimg.com/originals/b2/95/45/b29545916fbf406f7cec10ff1845a191.jpg\"\r\n        },\r\n    ] /*as Array<DialogsType>*/,\r\n    messages: [\r\n        {id: 1, message: \"How are you?\"},\r\n        {id: 2, message: \"Hello\"},\r\n        {id: 3, message: \"Yo\"},\r\n    ], // as Array<MessagesType>,\r\n    newMessageText: \" \"\r\n}\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DialogActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.UPDATE_NEW_MESSAGE_TEXT:\r\n            return {\r\n                ...state, newMessageText: action.newMessage\r\n            }\r\n        case ACTION_TYPE.SEND_MESSAGE:\r\n            const nextMessage: MessagesType = {\r\n                id: new Date().getTime(),\r\n                message: state.newMessageText\r\n            }\r\n\r\n            return {\r\n                ...state, messages: [nextMessage, ...state.messages],\r\n                newMessageText: \"\"\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const upDateNewMessageTextAC = (newMessage: string): UpdateMessageTextAT => {\r\n    return {\r\n        type: ACTION_TYPE.UPDATE_NEW_MESSAGE_TEXT,\r\n        newMessage,\r\n    } as const\r\n}\r\nexport const sendMessageAC = (): SendMessageAT => {\r\n    return (\r\n        {\r\n            type: ACTION_TYPE.SEND_MESSAGE\r\n        }\r\n    ) as const\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Redirect} from 'react-router-dom'\r\n\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n\r\n    const changeNewMessageHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.changeNewMessage(e.currentTarget.value)\r\n    }\r\n\r\n    const sendMessageHandler = () => {\r\n        props.sendNewMessage()\r\n    }\r\n\r\n    return(\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {\r\n                    props.dialogsPage.dialogs.map(d => {\r\n                        return (\r\n                            <div className={s.dialog + \" \" + s.active}>\r\n                                {d.name}\r\n                                <img src={d.img}/>\r\n                            </div>)\r\n                    })}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n                {\r\n                    props.dialogsPage.messages.map(m => {\r\n                        return (\r\n                            <div key={m.id}\r\n                                 className={s.dialog}>\r\n                                {m.message}\r\n                            </div>)\r\n                    })}\r\n\r\n                <textarea\r\n                    value={props.dialogsPage.newMessageText}\r\n                    placeholder=\"Enter your message\"\r\n                    onChange={changeNewMessageHandler}/>\r\n                <button onClick={sendMessageHandler}>send</button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n/*type mapStateToPropsForDirectType = {\r\n    isAuth: boolean\r\n}*/\r\nlet mapStateToPropsForDirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForDirect)(RedirectComponent)\r\n}","import React from 'react';\r\nimport {InitialStateType, sendMessageAC, upDateNewMessageTextAC} from \"../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\nexport type MapDispatchPropsType = {\r\n    changeNewMessage: (newMessage: string) => void\r\n    sendNewMessage: () => void\r\n}\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {   // AppStateType это type всего нашего state!!! и возвращает частичку state из редьюсера\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {   //dispatch импортируем из redux\r\n    return {\r\n        changeNewMessage: (newMessage: string) => {\r\n            dispatch(upDateNewMessageTextAC(newMessage))    //диспатчим action\r\n        },\r\n        sendNewMessage: () => {\r\n            dispatch(sendMessageAC())\r\n        }\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n\r\n\r\n\r\n","import {ACTION_TYPE} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean\r\n\r\n}\r\n\r\ntype FollowAT = {\r\n    type: ACTION_TYPE.FOLLOW_SUCCES\r\n    userID: number\r\n}\r\n\r\ntype UnFollowAT = {\r\n    type: ACTION_TYPE.UN_FOLLOW_SUCCESS\r\n    userID: number\r\n}\r\ntype SetUsersAT = {\r\n    type: ACTION_TYPE.SET_USERS\r\n    users: UserType[]\r\n}\r\n\r\ntype SetCurrentPageAT = {\r\n    type: ACTION_TYPE.SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\n\r\ntype SetTotalUserCountAT = {\r\n    type: ACTION_TYPE.SET_TOTAL_USER_COUNT\r\n    count: number\r\n}\r\n\r\ntype ToggleIsFetchingAT = {\r\n    type: ACTION_TYPE.TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype ToggleIsFollowingProgressAT = {\r\n    type: ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS\r\n    userId: number\r\n    isFetching: boolean\r\n}\r\nexport type UsersActionType = FollowAT |\r\n    UnFollowAT |\r\n    SetUsersAT |\r\n    SetCurrentPageAT |\r\n    SetTotalUserCountAT |\r\n    ToggleIsFetchingAT |\r\n    ToggleIsFollowingProgressAT\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 10,   // количество userov на одной странице\r\n    totalUsersCount: 20,  // сколько всего пользователей\r\n    currentPage: 1,   // текущая страница которую просматриваем\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FOLLOW_SUCCES:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case ACTION_TYPE.UN_FOLLOW_SUCCESS:\r\n            return {\r\n                ...state, users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case ACTION_TYPE.SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case ACTION_TYPE.SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case ACTION_TYPE.SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case ACTION_TYPE.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const followSucces = (userID: number): FollowAT => {    // функции AC\r\n    return {\r\n        type: ACTION_TYPE.FOLLOW_SUCCES,\r\n        userID: userID,\r\n    } as const\r\n}\r\n\r\nexport const unFollowSuccess = (userID: number): UnFollowAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.UN_FOLLOW_SUCCESS,\r\n        userID: userID\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_USERS,\r\n        users: users\r\n\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_CURRENT_PAGE,\r\n        currentPage,\r\n    } as const\r\n}\r\nexport const setTotalUserCount = (totalUsersCount: number): SetTotalUserCountAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingAT => {  // функции AC\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    }\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): ToggleIsFollowingProgressAT => {\r\n    return {\r\n        type: ACTION_TYPE.TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId,\r\n    } as const\r\n}\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false))\r\n                dispatch(setUsers(data.items))\r\n                dispatch(setTotalUserCount(data.totalCount))\r\n            })\r\n    }\r\n}\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFollowingProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSucces(userId))\r\n                }\r\n                dispatch(toggleIsFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number) => {\r\n    return (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFollowingProgress(true, userId));\r\n        usersAPI.unFollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unFollowSuccess(userId))\r\n                }\r\n                dispatch(toggleIsFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.7f686c03.gif\";","import React from 'react';\r\nimport preloader from \"../../assets/image/preloader.gif\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} style={{width: \"300px\"}}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","export default __webpack_public_path__ + \"static/media/avatar.7bdf7b93.png\";","export default {\r\n    // Options.jsx\r\n    items_per_page: '/ page',\r\n    jump_to: 'Go to',\r\n    jump_to_confirm: 'confirm',\r\n    page: '',\r\n\r\n    // Pagination.jsx\r\n    prev_page: 'Previous Page',\r\n    next_page: 'Next Page',\r\n    prev_5: 'Previous 5 Pages',\r\n    next_5: 'Next 5 Pages',\r\n    prev_3: 'Previous 3 Pages',\r\n    next_3: 'Next 3 Pages',\r\n};","import React from \"react\";\nimport s from \"./user.module.css\"\nimport avatar from \"../../assets/image/avatar.png\"\n\nimport {UserType} from \"../../redux/users-reducer\";\nimport {NavLink} from \"react-router-dom\";\nimport Pagination from \"rc-pagination\";\nimport localeInfo from '../../locale/en_US';\n\n\ntype UsersType = {\n    users: Array<UserType>\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    follow: (userID: number) => void,\n    unFollow: (userID: number) => void,\n    onPageHandler: (pageNumber: number) => void\n    followingInProgress: number[]\n\n}\n\nexport let Users = (props: UsersType) => {\n    /*let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\n    let page = []\n\n    for (let i = 1; i <= pagesCount; i++) {\n        page.push(i)\n    }*/\n    return (\n        <div className={s.users}>\n            <div className={\"pagination\"}>\n                {/*комент    {\n                    page.map((p, index) => {\n                            return (\n                                <span key={index}\n                                      className={props.currentPage === p ? s.selected : \"\"}\n                                      onClick={() => {\n                                          props.onPageHandler(p)\n                                      }}>{p}</span>\n                            )\n                        }\n                    )\n                }*/}\n                <Pagination className=\"ant-pagination\"\n                            showTitle={true}\n                            defaultCurrent={props.currentPage}\n                            total={props.totalUsersCount}\n                            onChange={(e) => props.onPageHandler(e)}\n                            defaultPageSize={props.pageSize}\n                            pageSize={props.pageSize}\n                            locale={localeInfo}\n\n                />\n            </div>\n\n            {\n                props.users.map(u => {\n                    return <div key={u.id} className={s.user}>\n\n                        <div className={s.common}>\n                            <NavLink className={s.photo} to={'./profile/' + u.id}>\n                                <img src={u.photos.small != null ? u.photos.small : avatar}\n                                />\n\n                            </NavLink>\n\n                            <div className={s.followAndDescription}>\n                                <div className={s.left}>\n                                    {u.followed ?\n                                        <button disabled={props.followingInProgress.some(id => id === u.id)}\n                                                onClick={() => {\n                                                    props.unFollow(u.id);\n                                                }}>UnFollow\n                                        </button> :\n\n                                        <button disabled={props.followingInProgress.some(id => id === u.id)}\n                                                onClick={() => {\n                                                    props.follow(u.id)\n                                                }}>Follow\n                                        </button>\n                                    }\n\n                                    <div>{u.name}</div>\n                                    <div>{u.status}</div>\n                                </div>\n\n                                <div className={s.right}>\n                                    <div>{\"u.location.country\"}</div>\n                                    <div>{\"u.location.city\"}</div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n\n                })\n            }\n\n        </div>\n\n    )\n}\n\n\n\n\n\n\n\n\n\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    getUsersThunkCreator,\r\n    setCurrentPage,\r\n    toggleIsFollowingProgress,\r\n    unFollow,\r\n    UserType\r\n} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport Preloader from \"../preloader/preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {Users} from \"./Users\";\r\n\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageHandler = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>    {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    unFollow={this.props.unFollow}\r\n                    follow={this.props.follow}\r\n                    users={this.props.users}\r\n                    onPageHandler={this.onPageHandler}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void,\r\n    unFollow: (userID: number) => void,\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n\r\n\r\n}\r\n\r\n\r\nexport type UsersPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,      // подразумевает follow: follow, где второе follow - это санки\r\n        unFollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        getUsers: getUsersThunkCreator\r\n    }),\r\n    withAuthRedirect,\r\n)(UsersContainer)\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n    }\r\n\r\n    activateMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deActivateMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render\")\r\n        return (\r\n            <>      {!this.state.editMode ?\r\n                <div>\r\n                    <span\r\n                        onDoubleClick={this.activateMode}>\r\n                        {this.props.status || \"-------\"}\r\n                    </span>\r\n                </div> :\r\n                <div>\r\n                    <input\r\n                        onChange={this.onStatusChange}\r\n                        value={this.state.status}\r\n                        autoFocus\r\n                        onBlur={this.deActivateMode}/>\r\n                </div>}\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\n\r\n/*\r\nimport React, {ChangeEvent, useState} from 'react';\r\nexport const ProfileStatus = (props: { status: string }) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [editeMode, setEditeMode] = useState<boolean>(false)\r\n    return (\r\n        <>\r\n            {!editeMode ?\r\n                <div>\r\n                    <span onClick={() => setEditeMode(true)}>{title}</span>\r\n                </div> :\r\n                <div>\r\n                    <input value={title}\r\n                           onBlur={() => setEditeMode(false)}\r\n                           onChange={(e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)}\r\n                           autoFocus={true}/>\r\n                </div>}\r\n        </>\r\n    )\r\n}*/\r\n","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../preloader/preloader\";\r\nimport {ProfileStatus} from './ProfileStatus';\r\nimport { ProfileType } from '../Profile';\r\n\r\n\r\n\r\nconst ProfileInfo = (props: ProfileType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    else {\r\n        return (\r\n            < div>\r\n                <div>\r\n                    <img src=\"https://www.nastol.com.ua/large/201805/284332.jpg\" className={s.item}/>\r\n                </div>\r\n                <div>\r\n                    <img className={s.info}\r\n                         src=\"https://shutniki.club/wp-content/uploads/2019/12/devushka_v_ochkah_risunok_4_06143556.jpg\"/>\r\n\r\n                     <ProfileStatus\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                     />\r\n                    <div className={s.descriptionBlock}>\r\n                    <div className={s.photo}>\r\n                        <img src={props.profile.photos.large}/></div>\r\n                        <div className={s.description}>\r\n                            <h3>Обо мне</h3>\r\n                            <div>{props.profile.aboutMe}</div>\r\n                            <h3>Мои социальные сети</h3>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.facebook}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.website}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.vk}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.twitter}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.instagram}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.youtube}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.github}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.contacts.mainLink}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.fullName}</a>\r\n                            <a href=\"https://google.com/\">{props.profile.lookingForAJob}</a>\r\n                            <h4>{props.profile.lookingForAJobDescription}</h4>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ProfileInfo;\r\n/*\r\ndata:\r\n    aboutMe: \"я круто чувак 1001%\"\r\ncontacts:\r\n    facebook: \"facebook.com\"\r\ngithub: \"github.com\"\r\ninstagram: \"instagra.com/sds\"\r\nmainLink: null\r\ntwitter: \"https://twitter.com/@sdf\"\r\nvk: \"vk.com/dimych\"\r\nwebsite: null\r\nyoutube: null\r\n    [[Prototype]]: Object\r\nfullName: \"samurai dimych\"\r\nlookingForAJob: true\r\nlookingForAJobDescription: \"не ищу, а дурачусь\"\r\nphotos:\r\n    large: \"https://social-network.samuraijs.com/activecontent/images/users/2/user.jpg?v=0\"\r\nsmall: \"https://social-network.samuraijs.com/activecontent/images/users/2/user-small.jpg?v=0\"\r\n*/\r\n\r\n","import React from \"react\";\r\nimport s from \"./post.module.css\"\r\nimport {PostsType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\nexport const Post = (props:PostsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            {props.message}\r\n\r\n            <div>\r\n                <span>like </span>{props.likeCount}<div><img src={props.img}/></div>\r\n            </div>\r\n                </div>\r\n                )\r\n\r\n}\r\nexport default Post;\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostsContainer\";\r\n\r\n\r\nfunction MyPosts(props: MyPostPropsType) {\r\n    const changeTextHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.changeText(e.currentTarget.value)\r\n    }\r\n\r\n    const addPostHandler = () => {\r\n        props.addPost()\r\n    }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <hr/>\r\n            {\r\n                props.posts.map(p =>\r\n                    <Post\r\n                        key={p.id}\r\n                        id={p.id}\r\n                        message={p.message}\r\n                        likeCount={p.likeCount}\r\n                        img={p.img}\r\n                    />)\r\n            }\r\n            <hr/>\r\n\r\n            <h3>My post</h3>\r\n\r\n            <textarea\r\n                value={props.newPostText}\r\n                onChange={changeTextHandler}>\r\n            </textarea>\r\n            <button\r\n                onClick={addPostHandler}>Add post\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostAC, changeTextAC, PostsType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux_store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    changeText: (newText: string) => void\r\n}\r\n\r\nexport type MyPostPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        },\r\n        changeText: (newText: string) => {\r\n            dispatch(changeTextAC(newText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./myPosts/MyPostsContainer\";\r\n\r\nexport type ProfileType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {setUserProfile, getUserStatus, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\ntype ProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = \"18320\"\r\n        }\r\n        this.props.setUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    profile: string | null\r\n    status: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    setUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfile, getUserStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport {Route} from \"react-router-dom\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Music\";\nimport New from \"./components/New/New\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\n\n\nconst App = () => {\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer/>\n            <Navbar/>\n            <div className=\"app-wrapper-content\">\n                <Route path=\"/profile/:userId?\" render={() =>\n                    <ProfileContainer/>}/>\n                <Route path=\"/dialogs\"\n                       render={() =>\n                           <DialogsContainer/>}/>\n                <Route path=\"/users\" render={() =>\n                    <UsersContainer/>}/>\n\n                <Route path=\"/new\" render={() => <New/>}/>\n                <Route path=\"/music\" component={Music}/>\n                <Route path=\"/settings\" component={Settings}/>\n                <Route path=\"/friends\" render={() => <div>f</div>}/>\n                <Route path=\"/login\" component={Login}/>\n            </div>\n        </div>)\n}\n\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleWare from \"redux-thunk\"\r\n\r\n\r\n/*export type ActionsType =\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof changeTextareaAC> |\r\n    ReturnType<typeof upDateNewMessageTextAC> |\r\n    ReturnType<typeof sendMessageAC>*/\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({              //rootReducer возвращает state\r\n    profilePage: profileReducer,  //это наш целый стэйт\r\n    dialogsPage: dialogsReducer,  // ключ: значение\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport type AppStateType=ReturnType<typeof rootReducer>   //  ReturnType -> дай мне  возвращаемый тип rootReducera\r\nexport let store = createStore(rootReducer, applyMiddleware(thunkMiddleWare))\r\n\r\n//@ts-ignore\r\nwindow.store = store.getState.bind(store)\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from './redux/redux_store';\n\nconsole.log(React.version);\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}